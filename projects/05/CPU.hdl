// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    Mux16(a=instruction,b=outM1,sel=instruction[15],out=w1);
    Not(in=instruction[15],out=insA);
    Or(a=insA,b=d1,out=loadA);
    ARegister(in=w1,load=loadA,out=w2,out=w3,out[0..14]=addressM);
    Mux16(a=w2,b=inM,sel=instruction[12],out=w4);
    DRegister(in=outM2,load=d2,out=w5);
    ALU(x=w5 ,y=w4 ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=outM,out=outM1,out=outM2 ,zr=zr1 ,ng=ng1 ); 
    Mux16(a=false,b=instruction,sel=instruction[15],out[5]=d1,out[4]=d2,out[3]=writeM,out[2]=j1,out[1]=j2,out[0]=j3);
    Not(in=ng1,out=notng);
    Not(in=zr1,out=notzr);
    And(a=notzr,b=notng,out=t1);
    And(a=t1,b=j3,out=t2);
    And(a=ng1,b=j1,out=t3);
    And(a=zr1,b=j2,out=t4);
    Or(a=t2,b=t3,out=t5);
    Or(a=t4,b=t5,out=PCload);
    PC(in=w3 ,load=PCload ,inc=true ,reset=reset ,out[0..14]=pc );
}